{"version":3,"file":"common.js","mappings":"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","sources":["./src/app/shared/directivas/match-passwords.directive.ts","./src/app/shared/models/nodo.ts","./src/app/shared/services/local-storage.service.ts","./src/app/shared/services/tree.service.ts"],"sourcesContent":["\n\n\n\nimport { AbstractControl, FormGroup } from \"@angular/forms\";\n\n\nexport function ConfirmPasswordValidator(controlName: string, matchingControlName: string) {\n  \n    return (formGroup: FormGroup) => {\n      let control = formGroup.controls[controlName];\n      let matchingControl = formGroup.controls[matchingControlName];\n\n      if ( matchingControl.errors && !matchingControl.errors.confirmPasswordValidator ) {\n        return;\n      }\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ confirmPasswordValidator: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n    };\n  }\n\n","\n\n\nexport class Nodo { \n\n    value: string;\n    children: Nodo[];\n    depth:number;\n    imgen_representativa:string;\n    \n\n    constructor ( value:string, children:Nodo[], depth:number, imagen_representativa: string ) {\n\n        this.value = value;\n        this.children = children;\n        this.depth =depth;\n        this.imgen_representativa = imagen_representativa;\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class LocalStorageService {\n\n  constructor() {}\n\n  set(key: string, value: string) {\n    localStorage.setItem(key, value);\n  }\n\n  get(key: string):string {\n    return localStorage.getItem(key) || '';\n  }\n\n  remove(key: string) {\n    localStorage.removeItem(key);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CategoriaRenderizable } from '../../shared/models/categoria-renderizable.interface';\nimport { Categoria } from '../../shared/models/categoria.interface';\nimport { Nodo } from '../../shared/models/nodo';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TreeService {\n\n\n  constructor() { }\n\n  //Constructor de nodo\n  createNodeRaiz(val:string, imagen_representativa: string):Nodo {\n    return new Nodo( val, [], 0, imagen_representativa );\n  }\n\n\n  // Búsqueda por anchura de un nodo en nuestro árbol\n  findBFS( tree:Nodo, value:string):Nodo {\n\n    var queue = [ tree ];\n    while (queue.length) {\n\n      var node:Nodo = <Nodo>queue.shift();  \n      if (node.value !== \"\") {\n        if (node.value === value) {\n          return node;\n        }\n        for (var i=0; i < node.children.length; i++) {\n          queue.push(node.children[i]);\n        }\n      }\n    }\n\n    return new Nodo(\"\", [], 0, \"\" );\n  }\n\n\n  //Añadir elemento al árbol\n  addNode(tree:Nodo, value:string, toNodeValue: string, depth: number, imagenRepresentativa:string): Nodo {\n\n\n    var queue:Nodo[] = [tree];\n\n    //Buscamos el nodo padre (toNodeValue)\n    var parent:Nodo = this.findBFS(tree, toNodeValue);\n\n    //Si encontramos el padre añadimos el nodo creado como hijo\n    if (parent.value!==\"\") {\n      \n      //Crea un nuevo objeto de tipo nodo con el valor 'value'.\n      var node:Nodo = new Nodo(value,[], depth, imagenRepresentativa);\n      parent.children.push(node);\n      return queue[0];\n\n    }\n    //Si no existe el nodo padre lo añádimos como raíz del árbol.\n    else if (tree.value === \"\") {\n      tree = new Nodo( value, [], 0, \"\");\n      return tree;\n    }\n    else {\n      throw new Error('Root node is already assigned and not find node parent ');\n    }\n\n  };\n\n  \n  //Elimino elemento del árbol\n  removeNode(tree:Nodo, value:string):Nodo {\n\n    var queue = [tree];\n\n    // caso especial: si el valor está en el\n    // nodo raíz reseteamos el árbol\n    if (tree.value === value) {\n      tree.value = \"\";\n      tree.children = [];\n      return tree;\n    }\n\n    while (queue.length) {\n      var node:Nodo = <Nodo>queue.shift();\n      for (var i = 0; i < node.children.length; i++) {\n        if (node.children[i].value === value) {\n          node.children.splice(i, 1);\n        }\n        else {\n          queue.push(node.children[i]);\n        }\n      }\n    }\n\n    return queue[0];\n  };\n\n  //Recorrido por anchura (Breadth First Search — BFS)\n  traverseBFS(tree:Nodo, soloHijosNodo:boolean, fn?:Function ):Nodo[] {\n\n    var queue = [tree];\n    //solo leemos los hijos directos de tree.\n    if (queue.length && soloHijosNodo ) {\n      var node:Nodo = <Nodo>queue.shift();\n      //fn && fn(node);\n      for (var i = 0; i < node.children.length; i++) {\n        queue.push(node.children[i]);\n      }\n    }\n\n    //leemos todo el arbol.\n    while (queue.length && !soloHijosNodo) {\n      var node:Nodo = <Nodo>queue.shift();\n      //fn && fn(node);\n      for (var i = 0; i < node.children.length; i++) {\n        queue.push(node.children[i]);\n      }\n    }\n\n    return queue;\n\n  };\n\n\n  //Recorrido por profundidad (Depth First Search — DFS)\n  traverseDFS( treeCategorias: Nodo, fn:Function, method:string):Nodo {\n\n    var current = treeCategorias;\n    if (method! === \"postOrder\") {\n      this.postOrder(current, fn);\n    }\n    else {\n      this.preOrder(current, fn);\n    }\n\n    return current;\n\n  };\n\n\n  //Pre-order\n   preOrder(node:Nodo, fn:Function):void {\n\n    if (node.value === \"\") {\n      return;\n    }\n    fn && fn(node);\n    for (var i = 0; i < node.children.length; i++) {\n      this.preOrder(node.children[i], fn);\n    }\n\n  };\n\n  //Post-orden\n  postOrder(node:Nodo, fn:Function):void {\n\n    if (node.value === \"\") {\n      return;\n    }\n    for (var i = 0; i < node.children.length; i++) {\n      this.postOrder(node.children[i], fn);\n    }\n    fn && fn(node);\n  };\n\n\n  loadHijosFromNodo(categoriaPadreClicado:string, treeCategorias: Nodo): CategoriaRenderizable [] {\n    //this.categorias = <string[]>this.treeService.traverseBFS(this.treeService.findBFS(this.treeCategorias, categoriaPadreClicado ), true ).map( (nodoTree:Nodo) => { return nodoTree.value });      \n    return <CategoriaRenderizable[]> this.traverseBFS(this.findBFS(treeCategorias, categoriaPadreClicado ), true ).map( (nodoTree:Nodo) => { return  { categoria:nodoTree.value, imagen_representativa: nodoTree.imgen_representativa }});      \n  }\n\n\n\n  creaArbolFromCategorias(categorias: Categoria[]): Nodo {\n\n\n    //inicializo nodo raiz del arbol de categorias\n    let treeCategorias:Nodo = this.createNodeRaiz(\"Categorías\", \"\");\n    \n\n    for (var i=0; i < categorias.length; i++ ) {\n\n      let categoria:Nodo = this.findBFS( treeCategorias, categorias[i].nombre_categoria);\n      //Si el nodo no existe debemos añadirlo como hijo del nodo padre que le corrsponda,\n      //en este caso el nodo padre es el raiz: Categorías\n      if (categoria.value===\"\") {\n        treeCategorias = this.addNode(\n                                        treeCategorias, \n                                        categorias[i].nombre_categoria, \n                                        treeCategorias.value,\n                                        1, //depth\n                                        categorias[i].imagen_categoria\n                                     )\n      }\n\n      if (categorias[i].subcategoria1 !==\"\") {\n\n        let subCategoria1 = this.findBFS(treeCategorias, categorias[i].subcategoria1);\n        if (subCategoria1.value===\"\") {\n          treeCategorias = this.addNode(\n                                          treeCategorias, \n                                          categorias[i].subcategoria1, \n                                          categorias[i].nombre_categoria,\n                                          2, //depth\n                                          categorias[i].imagen_subcat1\n                                       )\n        }\n\n        if (categorias[i].subcategoria2 !==\"\") {\n\n          let subCategoria2 = this.findBFS(treeCategorias, categorias[i].subcategoria2);\n          if (subCategoria2.value===\"\") {\n            treeCategorias = this.addNode(\n                                            treeCategorias, \n                                            categorias[i].subcategoria2, \n                                            categorias[i].subcategoria1,\n                                            3, //depth\n                                            categorias[i].imagen_subcat2\n                                         )\n            }\n        }\n      }\n    }\n\n    //PRINT\n    console.log(\"ARBOL: \", treeCategorias);\n    return treeCategorias;\n\n  }\n\n\n\n}\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}