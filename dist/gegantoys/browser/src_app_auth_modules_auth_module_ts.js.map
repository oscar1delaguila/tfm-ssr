{"version":3,"file":"src_app_auth_modules_auth_module_ts.js","mappings":"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","sources":["./src/app/auth/components/login/login.component.ts","./src/app/auth/components/login/login.component.html","./src/app/auth/modules/auth-routing.module.ts","./src/app/auth/modules/auth.module.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport * as authActions from '../../actions/auth.action';\nimport * as varGlobals from '../../../globals';\n\nimport { timer } from 'rxjs';\nimport { ToastService } from 'src/app/shared/services/toast.service';\nimport { Auth } from '../../models/auth.interface';\nimport { LocalStorageService } from 'src/app/shared/services/local-storage.service';\nimport { AuthState } from '../../reducers';\nimport { AppState } from 'src/app/app.reducers';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n\n  hide:boolean =true;\n  credentials!:Auth;\n  loginForm!: FormGroup;\n  email!:FormControl;\n  password!:FormControl;\n  userId:string = '';\n  isAdmin:boolean = false;\n\n  constructor(\n\n    private formBuilder: FormBuilder,\n    private router:Router,\n    private serviceLocalStorage: LocalStorageService,\n    private store: Store<AppState>,\n    private toastService:ToastService,\n\n  ) {\n\n\n    this.store.select('auth').subscribe({\n      next:(authState:AuthState) => {\n        this.userId = authState.auth.user_id;\n        this.isAdmin = authState.auth.isAdmin;\n      }\n    });\n\n\n    this.email = new FormControl('', [ Validators.required, Validators.pattern('[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,4}$') ]);\n    this.password = new FormControl('', [Validators.required, Validators.minLength(6), Validators.maxLength(16), ]);\n\n\n    this.loginForm = this.formBuilder.group({\n      email: this.email,\n      password: this.password\n    });\n\n\n\n   }\n\n  ngOnInit(): void {\n  }\n\n\n  login() {\n\n    this.credentials = {\n      password: this.loginForm.controls.password.value,\n      email: this.loginForm.controls.email.value,\n      user_id:'',\n      isAdmin: false,\n      access_token:''\n    }\n\n\n    this.store.dispatch(authActions.login({credentials: this.credentials}));\n/*\n    this.sesionService.login(this.usuario).subscribe({\n\n      next:(userLogged:Usuario) => {\n          //PRINT\n          console.log('Usuario logado: ', userLogged);\n          //Si el login es correcto almacenamos el token en el navegador.\n          this.serviceLocalStorage.set('access_token', (userLogged.access_token) ? userLogged.access_token : '' );\n          this.serviceLocalStorage.set('user_id', (userLogged.id) ? userLogged.id : '' );\n          this.store.dispatch(actions.login({user_id:userLogged.id || '', token:userLogged.access_token || ''}));\n          \n          if (varGlobals.emailAdmin == userLogged.email){\n            this.serviceLocalStorage.set('user_admin', 'yes' );\n            this.store.dispatch(actions.isTheAdmin({ isAdmin: true }));\n          }  \n\n          this.toastService.managementToast('postFeedback', true, 'Login:  ');\n\n          timer(3000).subscribe({\n            next:(value:number) => {\n              if (value == 0) {\n                  let toastMsg = <HTMLSpanElement>document.getElementById('postFeedback');\n                  toastMsg.style.display = 'none';            \n                  this.router.navigateByUrl('/juguetes');\n              }\n            }\n          });\n      },\n      error:(err:any) => {\n          this.toastService.managementToast('postFeedback', false, 'Usuario o contraseña: ');\n          timer(3000).subscribe({\n            next:(value:number) => {\n              if (value == 0) {\n                  let toastMsg = <HTMLSpanElement>document.getElementById('postFeedback');\n                  toastMsg.style.display = 'none';            \n              }\n            }\n          })\n      }\n    });\n\n    */\n  }\n\n}\n","\n\n\n     \n\n\n<div class=\"contenedor-pagina-peq mb-12\">\n\n    <div class=\"circle\"></div>\n    <div class=\"triangle\"></div>    \n    \n    <div class=\"titulo-pagina\">Iniciar sesión en GeganToys</div>\n\n        <div class=\"mx-auto text-center z-10\">\n            <div  class=\"sm:w-1/2\">\n                <form *ngIf=\"loginForm\" [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n\n                        <!-- <div class=\"my-10 text-left px-8\">\n                            <label for=\"email\" class=\"etiqueta-text text-white\" >Email:</label>\n                            <input type=\"email\" class=\"input-text\" [formControl]=\"email\" />\n                    \n                            <div *ngIf=\"email.errors && email.touched\" [ngClass]=\"'error'\">\n                                <div *ngIf=\"email.errors.required\">\n                                    El email de usuario es obligatorio.\n                                </div>\n                                <div *ngIf=\"email.errors.pattern\">\n                                    Email no tiene un formato válido.\n                                </div>\n                            </div>\n                        </div>\n                        -->\n                        <div class=\"my-10 text-left px-8\">\n                            <mat-form-field appearance=\"outline\" class=\"w-full \">\n                                <mat-label>Email</mat-label>\n                                    <input matInput type=\"email\" [formControl]=\"email\"  >\n                                    <mat-error *ngIf=\"email.errors\">\n                                        <span *ngIf=\"email.errors && (email.touched || email.dirty)\">\n                                            <span *ngIf=\"email.errors.required\">\n                                                Email es requerido\n                                            </span>\n                                            <span *ngIf=\"email.errors.pattern\">\n                                                Email no tiene formato válido.\n                                            </span>\n                                        </span>\n                                    </mat-error>\n                            </mat-form-field>\n                        </div>\n\n                        <div class=\"my-10 text-left px-8\">\n                                <mat-form-field appearance=\"outline\" class=\"w-full\" >\n                                    <mat-label>Contraseña</mat-label>\n                                    <input matInput [type]=\"hide ? 'password' : 'text'\"  [formControl]=\"password\" >\n                                    <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\" [attr.aria-pressed]=\"hide\">\n                                      <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                                    </button>\n                                    <mat-error>\n                                    <span *ngIf=\"password.errors && (password.touched || password.dirty)\">\n                                        <span *ngIf=\"password.errors.required\">\n                                            Password es requerido\n                                        </span>\n                                        <span *ngIf=\"password.errors.minlength\">\n                                            Password mínimo de 6 caracteres.\n                                        </span>\n                                        <span *ngIf=\"password.errors.maxlength\">\n                                            Password máximo de 16 caracteres.\n                                        </span>\n                                    </span>\n                                    </mat-error>\n                                </mat-form-field>   \n                        </div>\n\n                        <!--\n                        <div class=\"my-10 text-left px-8\">\n                            <label for=\"password\" class=\"etiqueta-text text-white\" >Contraseña:</label>\n                            <input type=\"password\" class=\"input-text\" [formControl]=\"password\" />\n                    \n                            <div *ngIf=\"password.errors && password.touched\" [ngClass]=\"'error'\">\n                                <div *ngIf=\"password.errors.required\">\n                                    El password es obligatorio.\n                                </div>\n                                <div *ngIf=\"password.errors.minlength\">\n                                    Password mínimo de 6 caracteres.\n                                </div>\n                                <div *ngIf=\"password.errors.maxlength\">\n                                    Password máximo 16 caracteres.\n                                </div>\n                            </div>\n                        </div>\n                    -->\n                    <button type=\"submit\" class=\"bg-red-dark px-8 py-3 my-4 red-dark-button rounded text-white inline\" [disabled]=\"loginForm.invalid\" >\n                        Ingresar \n                    </button>\n                    \n                </form>\n            </div>\n            \n            <div class=\"sm:w-1/3 mx-auto  xl:py-14 sm:my-8\">\n                <a class=\"nav-link text-base sm:text-2xl my-4 text-red-dark \" routerLink=\"/register\" routerLinkActive=\"active\"  tabindex=\"-1\" aria-disabled=\"true\">\n                    ¿No eres miembro aún? Date de alta.\n                </a>\n                <!--\n                <a class=\"nav-link text-base sm:text-2xl my-4 text-white\" routerLink=\"#\" routerLinkActive=\"active\"  tabindex=\"-1\" aria-disabled=\"true\">\n                    ¿Has olvidado tu contraseña?\n                </a>\n                -->\n            </div>\n        \n        </div>    \n</div> \n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from '../components/login/login.component';\n\n\n\n\nconst routes: Routes = [\n  { \n    path: '', \n    component: LoginComponent,\n  },\n];\n\n\n@NgModule({\n\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthRoutingModule } from './auth-routing.module';\nimport { LoginComponent } from '../components/login/login.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatIconModule } from '@angular/material/icon';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n  ],\n  imports: [\n    CommonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    AuthRoutingModule,\n    MatIconModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AuthModule { }\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}